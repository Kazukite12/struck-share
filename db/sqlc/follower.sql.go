// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: follower.sql

package db

import (
	"context"
)

const countUserTotalFollower = `-- name: CountUserTotalFollower :many
SELECT count(*) FROM follower
WHERE user_id = $1
`

func (q *Queries) CountUserTotalFollower(ctx context.Context, userID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, countUserTotalFollower, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var count int64
		if err := rows.Scan(&count); err != nil {
			return nil, err
		}
		items = append(items, count)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createFollower = `-- name: CreateFollower :one
INSERT INTO follower (
 user_id, 
 followed_user_id
) VALUES (
  $1, $2
)
RETURNING user_id, followed_user_id
`

type CreateFollowerParams struct {
	UserID         int64
	FollowedUserID int64
}

func (q *Queries) CreateFollower(ctx context.Context, arg CreateFollowerParams) (Follower, error) {
	row := q.db.QueryRowContext(ctx, createFollower, arg.UserID, arg.FollowedUserID)
	var i Follower
	err := row.Scan(&i.UserID, &i.FollowedUserID)
	return i, err
}

const deleteFollower = `-- name: DeleteFollower :exec
DELETE FROM follower
WHERE followed_user_id = $1
`

func (q *Queries) DeleteFollower(ctx context.Context, followedUserID int64) error {
	_, err := q.db.ExecContext(ctx, deleteFollower, followedUserID)
	return err
}

const getUserFollower = `-- name: GetUserFollower :one
SELECT user_id, followed_user_id FROM follower
WHERE user_id = $1 AND followed_user_id = $2
LIMIT 1
`

type GetUserFollowerParams struct {
	UserID         int64
	FollowedUserID int64
}

func (q *Queries) GetUserFollower(ctx context.Context, arg GetUserFollowerParams) (Follower, error) {
	row := q.db.QueryRowContext(ctx, getUserFollower, arg.UserID, arg.FollowedUserID)
	var i Follower
	err := row.Scan(&i.UserID, &i.FollowedUserID)
	return i, err
}

const listFollower = `-- name: ListFollower :many
SELECT user_id, followed_user_id FROM follower
WHERE user_id = $1
LIMIT $2
OFFSET $3
`

type ListFollowerParams struct {
	UserID int64
	Limit  int32
	Offset int32
}

func (q *Queries) ListFollower(ctx context.Context, arg ListFollowerParams) ([]Follower, error) {
	rows, err := q.db.QueryContext(ctx, listFollower, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Follower{}
	for rows.Next() {
		var i Follower
		if err := rows.Scan(&i.UserID, &i.FollowedUserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
