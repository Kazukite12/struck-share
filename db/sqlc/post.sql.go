// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: post.sql

package db

import (
	"context"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
  created_by_user_id,
  caption
) VALUES (
  $1, $2
)
RETURNING post_id, created_by_user_id, caption, created_at
`

type CreatePostParams struct {
	CreatedByUserID int64
	Caption         string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.CreatedByUserID, arg.Caption)
	var i Post
	err := row.Scan(
		&i.PostID,
		&i.CreatedByUserID,
		&i.Caption,
		&i.CreatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE post_id = $1
`

func (q *Queries) DeletePost(ctx context.Context, postID int64) error {
	_, err := q.db.ExecContext(ctx, deletePost, postID)
	return err
}

const getPost = `-- name: GetPost :one
SELECT post_id, created_by_user_id, caption, created_at FROM posts
WHERE post_id = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, postID int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, postID)
	var i Post
	err := row.Scan(
		&i.PostID,
		&i.CreatedByUserID,
		&i.Caption,
		&i.CreatedAt,
	)
	return i, err
}

const listPost = `-- name: ListPost :many
SELECT post_id, created_by_user_id, caption, created_at FROM posts
WHERE created_by_user_id = $1
ORDER BY post_id
LIMIT $2
OFFSET $3
`

type ListPostParams struct {
	CreatedByUserID int64
	Limit           int32
	Offset          int32
}

func (q *Queries) ListPost(ctx context.Context, arg ListPostParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPost, arg.CreatedByUserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.PostID,
			&i.CreatedByUserID,
			&i.Caption,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
