// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: comments.sql

package db

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (
  created_by_user_id,
  post_id,
  comment
) VALUES (
  $1, $2, $3
)
RETURNING comment_id, created_by_user_id, post_id, comment, created_at
`

type CreateCommentParams struct {
	CreatedByUserID int64
	PostID          int64
	Comment         string
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.CreatedByUserID, arg.PostID, arg.Comment)
	var i Comment
	err := row.Scan(
		&i.CommentID,
		&i.CreatedByUserID,
		&i.PostID,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE comment_id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, commentID int64) error {
	_, err := q.db.ExecContext(ctx, deleteComment, commentID)
	return err
}

const getComment = `-- name: GetComment :one
SELECT comment_id, created_by_user_id, post_id, comment, created_at FROM comments
WHERE comment_id = $1 LIMIT 1
`

func (q *Queries) GetComment(ctx context.Context, commentID int64) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getComment, commentID)
	var i Comment
	err := row.Scan(
		&i.CommentID,
		&i.CreatedByUserID,
		&i.PostID,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}

const listComment = `-- name: ListComment :many
SELECT comment_id, created_by_user_id, post_id, comment, created_at FROM comments
WHERE post_id = $1
LIMIT $2
OFFSET $3
`

type ListCommentParams struct {
	PostID int64
	Limit  int32
	Offset int32
}

func (q *Queries) ListComment(ctx context.Context, arg ListCommentParams) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, listComment, arg.PostID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.CommentID,
			&i.CreatedByUserID,
			&i.PostID,
			&i.Comment,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
