// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: post_likes.sql

package db

import (
	"context"
)

const countPostTotalLikes = `-- name: CountPostTotalLikes :many
SELECT count(*) FROM post_likes
WHERE post_id = $1
`

func (q *Queries) CountPostTotalLikes(ctx context.Context, postID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, countPostTotalLikes, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var count int64
		if err := rows.Scan(&count); err != nil {
			return nil, err
		}
		items = append(items, count)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createPostLikes = `-- name: CreatePostLikes :one
INSERT INTO post_likes (
  post_id,
  post_liker
) VALUES (
  $1, $2
)
RETURNING post_id, post_liker
`

type CreatePostLikesParams struct {
	PostID    int64
	PostLiker string
}

func (q *Queries) CreatePostLikes(ctx context.Context, arg CreatePostLikesParams) (PostLike, error) {
	row := q.db.QueryRowContext(ctx, createPostLikes, arg.PostID, arg.PostLiker)
	var i PostLike
	err := row.Scan(&i.PostID, &i.PostLiker)
	return i, err
}

const createPostUnlikes = `-- name: CreatePostUnlikes :exec
DELETE FROM post_likes
WHERE post_liker = $1
`

func (q *Queries) CreatePostUnlikes(ctx context.Context, postLiker string) error {
	_, err := q.db.ExecContext(ctx, createPostUnlikes, postLiker)
	return err
}

const getPostLike = `-- name: GetPostLike :one
SELECT post_id, post_liker FROM post_likes
WHERE post_liker = $1 AND post_id = $2
LIMIT 1
`

type GetPostLikeParams struct {
	PostLiker string
	PostID    int64
}

func (q *Queries) GetPostLike(ctx context.Context, arg GetPostLikeParams) (PostLike, error) {
	row := q.db.QueryRowContext(ctx, getPostLike, arg.PostLiker, arg.PostID)
	var i PostLike
	err := row.Scan(&i.PostID, &i.PostLiker)
	return i, err
}

const listPostLiker = `-- name: ListPostLiker :many
SELECT post_id, post_liker FROM post_likes
WHERE post_id = $1
ORDER BY post_liker
LIMIT $2
OFFSET $3
`

type ListPostLikerParams struct {
	PostID int64
	Limit  int32
	Offset int32
}

func (q *Queries) ListPostLiker(ctx context.Context, arg ListPostLikerParams) ([]PostLike, error) {
	rows, err := q.db.QueryContext(ctx, listPostLiker, arg.PostID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PostLike{}
	for rows.Next() {
		var i PostLike
		if err := rows.Scan(&i.PostID, &i.PostLiker); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
